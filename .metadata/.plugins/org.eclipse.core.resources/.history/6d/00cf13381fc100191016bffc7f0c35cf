package com.luv2code.springdemo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

//annotation to register bean with id of default.
//name bean id by putting name in "" inside ().
@Component
public class TennisCoach implements Coach 
{

	// == Private Fields ==
		//used for injection
	// == Field Injection ==
	@Autowired
	@Qualifier("databaseFortuneService") //be specific when multiple implementations of interface are created.
	private FortuneService fortuneService;
	
	//== Constructors ==
	public TennisCoach()
	{
		System.out.println(">> TennisCoach: inside default constructor");
	}
	
	
	// == Constructor Injection ==
	//for specific use:
		//@Autowired
		//public TennisCoach(@Qualifier("randomFortuneService") FortuneService theFortuneService)
		//{
		//	  System.out.println(">> TennisCoach: inside constructor using @autowired and @qualifier");
		//	  this.fortuneService = theFortuneService;
		//}
	/*
	 @Autowired 
	 public TennisCoach(FortuneService theFortuneService) 
	 {
	 	//TennisCoach will scan for fortuneService and inject it. 
	 	this.fortuneService = theFortuneService; 
	 }
	 */
	
	// == Setter Injection ==
	/*
	@Autowired
	public void setFortuneServicce(FortuneService theFortuneService)
	{
		System.out.println(">> TennisCoach: inside setFortuneService() method");
		this.fortuneService = theFortuneService;
	}
	*/
	
	// == Method Injection ==
	/*
	@Autowired
	public void doSomeCrazyStuff(FortuneService theFortuneService)
	{
		System.out.println(">> TennisCoach: inside doSomeCrazyStuff() method");
		this.fortuneService = theFortuneService;
	}
	*/
	
	// == Override Methods == Implementing Interface
	@Override
	public String getDailyWorkout() 
	{
		return "Practice your backhand volley";
	}

	@Override
	public String getDailyFortune() 
	{
		return fortuneService.getFortune();
	}

}
